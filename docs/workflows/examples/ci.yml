name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel in-progress runs when a new workflow with the same group name is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  # ==========================================================================
  # Code Quality and Static Analysis
  # ==========================================================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Lint with Ruff
        run: |
          ruff check acousto_gen/ tests/ --output-format=github
          ruff format acousto_gen/ tests/ --check

      - name: Type checking with MyPy
        run: |
          mypy acousto_gen/ --junit-xml=mypy-report.xml

      - name: Check documentation
        run: |
          doc8 docs/ --max-line-length=88
          python -m doctest acousto_gen/*.py || true

      - name: Upload type checking results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: type-checking-results
          path: mypy-report.xml

  # ==========================================================================
  # Security Scanning
  # ==========================================================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
          pip install safety bandit pip-audit

      - name: Run Bandit security linter
        run: |
          bandit -r acousto_gen/ -f json -o bandit-report.json || true
          bandit -r acousto_gen/ -f txt

      - name: Check dependencies for vulnerabilities
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Audit with pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json

  # ==========================================================================
  # Unit and Integration Tests
  # ==========================================================================
  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          # Extended testing on Ubuntu with Python 3.11
          - os: ubuntu-latest
            python-version: '3.11'
            run-integration: true
            run-performance: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libfftw3-dev libhdf5-dev libsndfile1-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install fftw hdf5 libsndfile

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run unit tests
        run: |
          pytest tests/unit/ -v \
            --cov=acousto_gen \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junit-xml=junit-unit.xml

      - name: Run integration tests
        if: matrix.run-integration
        run: |
          pytest tests/integration/ -v \
            --junit-xml=junit-integration.xml

      - name: Run performance tests
        if: matrix.run-performance
        run: |
          pytest tests/ -m performance -v \
            --benchmark-json=benchmark-results.json

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            junit-*.xml
            htmlcov/
            benchmark-results.json

  # ==========================================================================
  # Docker Build and Test
  # ==========================================================================
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: acousto-gen/acousto-gen
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-

      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          platforms: linux/amd64
          push: false
          tags: acousto-gen:dev-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test development image
        run: |
          docker run --rm acousto-gen:dev-test python -c "import acousto_gen; print('Import successful')"
          docker run --rm acousto-gen:dev-test pytest tests/unit/ --tb=short

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test production image
        run: |
          docker run --rm ${{ steps.meta.outputs.tags }} acousto-gen --version

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ==========================================================================
  # Documentation Build
  # ==========================================================================
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Build documentation
        run: |
          cd docs
          make html SPHINXOPTS="-W --keep-going -n"

      - name: Check documentation links
        run: |
          cd docs
          make linkcheck

      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: docs/_build/html/

  # ==========================================================================
  # Hardware Simulation Tests (if hardware testing enabled)
  # ==========================================================================
  hardware-sim:
    name: Hardware Simulation
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false && contains(github.event.pull_request.labels.*.name, 'hardware')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,hardware]

      - name: Run hardware simulation tests
        run: |
          pytest tests/ -m "hardware" -v \
            --junit-xml=junit-hardware.xml

      - name: Upload hardware test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: hardware-test-results
          path: junit-hardware.xml

  # ==========================================================================
  # Performance Benchmarking
  # ==========================================================================
  benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false && (contains(github.event.pull_request.labels.*.name, 'performance') || github.event_name == 'push')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run performance benchmarks
        run: |
          pytest tests/ -m performance --benchmark-json=benchmark.json

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '200%'
          fail-on-alert: true

  # ==========================================================================
  # Build Summary and Notifications
  # ==========================================================================
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [quality, security, test, docker, docs]
    if: always() && github.event.pull_request.draft == false
    
    steps:
      - name: Check build results
        run: |
          echo "Quality: ${{ needs.quality.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Docker: ${{ needs.docker.result }}"
          echo "Docs: ${{ needs.docs.result }}"

      - name: Notify on success
        if: needs.quality.result == 'success' && needs.security.result == 'success' && needs.test.result == 'success' && needs.docker.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#acousto-gen-ci'
          text: '✅ CI pipeline passed for ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Notify on failure
        if: needs.quality.result == 'failure' || needs.security.result == 'failure' || needs.test.result == 'failure' || needs.docker.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#acousto-gen-ci'
          text: '❌ CI pipeline failed for ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Set build status
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && \
                "${{ needs.security.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.docker.result }}" == "success" ]]; then
            echo "BUILD_STATUS=success" >> $GITHUB_ENV
          else
            echo "BUILD_STATUS=failure" >> $GITHUB_ENV
            exit 1
          fi