version: '3.8'

services:
  # Main Acousto-Gen API Service
  acousto-gen-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: acousto-gen-api
    restart: unless-stopped
    ports:
      - "443:8000"  # HTTPS port
      - "8000:8000"  # HTTP port (redirect to HTTPS)
    environment:
      - ACOUSTO_ENV=production
      - ACOUSTO_DEBUG=false
      - ACOUSTO_ENABLE_HTTPS=true
      - ACOUSTO_ENABLE_RATE_LIMITING=true
      - ACOUSTO_AUDIT_LOGGING=true
      - ACOUSTO_MAX_WORKERS=4
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://acousto:${DB_PASSWORD}@postgres:5432/acousto_gen
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ACOUSTO_ADMIN_PASSWORD=${ACOUSTO_ADMIN_PASSWORD}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./ssl:/app/ssl:ro
      - /dev/bus/usb:/dev/bus/usb  # USB access for hardware
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0  # Serial hardware access
    depends_on:
      - redis
      - postgres
      - prometheus
    networks:
      - acousto-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 2G
          cpus: '1'

  # GPU-Accelerated Compute Service
  acousto-gen-gpu:
    build:
      context: .
      dockerfile: Dockerfile.gpu
      target: production-gpu
    container_name: acousto-gen-gpu
    restart: unless-stopped
    environment:
      - ACOUSTO_ENV=production
      - CUDA_VISIBLE_DEVICES=0,1
      - ACOUSTO_ENABLE_MULTI_GPU=true
      - ACOUSTO_MIXED_PRECISION=true
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - acousto-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 2
              capabilities: [gpu]
    profiles:
      - gpu

  # Redis for Caching and Task Queue
  redis:
    image: redis:7-alpine
    container_name: acousto-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - acousto-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: acousto-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=acousto_gen
      - POSTGRES_USER=acousto
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./config/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - acousto-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U acousto -d acousto_gen"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: acousto-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - acousto-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: acousto-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_RENDERING_SERVER_URL=http://renderer:8081/render
      - GF_RENDERING_CALLBACK_URL=http://grafana:3000/
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - acousto-network

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: acousto-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - acousto-gen-api
      - grafana
    networks:
      - acousto-network
    profiles:
      - nginx

  # Cluster Worker Nodes
  acousto-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    restart: unless-stopped
    environment:
      - ACOUSTO_ENV=production
      - ACOUSTO_NODE_TYPE=worker
      - ACOUSTO_SCHEDULER_HOST=acousto-gen-api
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - acousto-gen-api
    networks:
      - acousto-network
    deploy:
      mode: replicated
      replicas: 3
    profiles:
      - cluster

  # Log Aggregation
  fluentd:
    build: ./config/fluentd
    container_name: acousto-fluentd
    restart: unless-stopped
    volumes:
      - ./logs:/fluentd/log
      - ./config/fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - acousto-network
    profiles:
      - logging

  # Security Scanner
  security-scanner:
    build:
      context: .
      dockerfile: Dockerfile.security
    container_name: acousto-security-scanner
    restart: "no"
    volumes:
      - ./:/app/code:ro
      - ./security-reports:/app/reports
    networks:
      - acousto-network
    profiles:
      - security

# Volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local

# Networks
networks:
  acousto-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

# Health Checks and Monitoring
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s