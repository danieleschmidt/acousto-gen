[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "acousto-gen"
version = "0.1.0"
description = "Generative acoustic holography toolkit for creating 3D pressure fields through ultrasonic transducer arrays"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@example.com"}
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@example.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
keywords = ["acoustics", "holography", "ultrasound", "levitation", "haptics"]
requires-python = ">=3.9"
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "torch>=2.0.0",
    "matplotlib>=3.5.0",
    "plotly>=5.0.0",
    "h5py>=3.0.0",
    "pydantic>=2.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "nbsphinx>=0.9.0",
]
hardware = [
    "pyserial>=3.5",
    "usb-devices>=0.1.0",
    "sounddevice>=0.4.0",
]
full = [
    "acousto-gen[dev,hardware]",
    "jupyter>=1.0.0",
    "ipywidgets>=8.0.0",
    "tqdm>=4.64.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/acousto-gen"
Documentation = "https://acousto-gen.readthedocs.io"
Repository = "https://github.com/yourusername/acousto-gen.git"
Issues = "https://github.com/yourusername/acousto-gen/issues"
Changelog = "https://github.com/yourusername/acousto-gen/blob/main/CHANGELOG.md"

[project.scripts]
acousto-gen = "acousto_gen.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["acousto_gen*"]
exclude = ["tests*", "docs*"]

[tool.ruff]
line-length = 88
target-version = "py39"
extend-exclude = ["docs", "build", "dist"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "N",  # pep8-naming
    "UP", # pyupgrade
    "D",  # pydocstyle
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D401", # First line should be in imperative mood
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]
"__init__.py" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "scipy.*",
    "matplotlib.*",
    "plotly.*",
    "h5py.*",
    "sounddevice.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=acousto_gen",
    "--cov-report=html",
    "--cov-report=term-missing",
    "-ra",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "hardware: marks tests that require hardware",
]

[tool.coverage.run]
source = ["acousto_gen"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]