name: acousto-gen-cicd-pipeline

on:
  push:
    branches: ['main', 'develop', 'release/*']
  pull_request:
    branches: ['main']

env:
  DOCKER_REGISTRY: your-registry.com
  APP_NAME: acousto-gen

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-cov ruff mypy
    
    - name: Run tests
      run: |
        python -m pytest tests/ --cov=src/ --cov-report=xml
    
    - name: Lint code
      run: |
        python -m ruff check src/
        python -m mypy src/
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        pip install bandit safety
        python -m bandit -r src/ -f json -o bandit-report.json
        python -m safety check --json --output safety-report.json

  quality-gates:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    steps:
    - uses: actions/checkout@v4
    
    - name: Run quality gates
      run: |
        python comprehensive_quality_gates_system.py

  build-and-push:
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and push Docker image
      run: |
        docker build -t $DOCKER_REGISTRY/$APP_NAME:${{ github.sha }} .
        docker push $DOCKER_REGISTRY/$APP_NAME:${{ github.sha }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - name: Deploy to staging
      run: |
        kubectl set image deployment/$APP_NAME $APP_NAME=$DOCKER_REGISTRY/$APP_NAME:${{ github.sha }} -n $APP_NAME-staging
        kubectl rollout status deployment/$APP_NAME -n $APP_NAME-staging --timeout=300s

  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
    - name: Deploy to production
      run: |
        kubectl set image deployment/$APP_NAME $APP_NAME=$DOCKER_REGISTRY/$APP_NAME:${{ github.sha }} -n $APP_NAME-prod
        kubectl rollout status deployment/$APP_NAME -n $APP_NAME-prod --timeout=600s
